#!/usr/bin/python

from snack import *
import sys,os
import socket
import signal
import commands
import subprocess
import ConfigParser
import json
import codecs
import shutil
import logging
import re
import hashlib
#from rfc3987 import parse
from augeas import Augeas

def signal_handler(signal, frame):
    logging.info('You pressed Ctrl+C!')
    sys.exit(0)

def detect_public_ip():
    try:
        # Warning: Not working in all linuxes.
        ip = commands.getoutput("/sbin/ifconfig").split("\n")[1].split()[1]
        s = socket.inet_aton(ip)
        return ip
    except socket.error:
        return False

class NfsWindow:
    def __init__(self,screen):
        self.conf_path = "/opt/esage/config/esage.properties"
        self.fstab_path = "/etc/fstab"
        self.mtab_path = "/etc/mtab"
        self.repository_path = "/opt/templatelibrary"
        self.defaulturl = "<nfs-ip>:/vmimage"
        self.screen = screen
        self.label = Label('NFS repository:')
        self.entry = Entry(33,self.defaulturl)
        self.text = TextboxReflowed(50,"Enter your NFS repository URL.\n")
        self.topgrid = GridForm(self.screen, "NFS repository", 1, 3)
        self.topgrid.add(self.text,0,0,(0, 0, 0, 1))
        self.grid = Grid(2, 1)
        self.grid.setField (self.label, 0, 0, (0, 0, 1, 0), anchorLeft = 1)
        self.grid.setField (self.entry, 1, 0)
        self.topgrid.add (self.grid, 0, 1, (0, 0, 0, 1))
        self.bb = ButtonBar (self.screen, ["OK","Cancel"],compact=1)
        self.topgrid.add (self.bb, 0, 2, growx = 1)

    def run(self):
        # Exit if vm_repository exists in mtab
        if self.check_mount():
            return -1
        self.topgrid.setCurrent(self.entry)
        result = self.topgrid.run()
        rc = self.bb.buttonPressed(result)
        if rc == "cancel":
            return -1
        if not self.check_nfs_url(self.entry.value()):
            self.screen.popWindow()
            self.defaulturl = self.entry.value()
            ButtonChoiceWindow(self.screen,"URL incorrect-niu","Please enter a URL with the form:\n <ip>:<mountpoint>",buttons = ["OK"], width = 50)
        elif not self.mount_nfs(self.entry.value()):
            self.screen.popWindow()
            self.defaulturl = self.entry.value()
            ButtonChoiceWindow(self.screen,"Can't mount","Mountpoint not valid or access denied.",buttons = ["OK"], width = 50)
        else:
            self.defaulturl = self.entry.value()
            self.set_nfs_url(self.defaulturl)
            return 0
#############################
    def set_nfs_url(self,url):
        config = ConfigParser.ConfigParser()
        config.optionxform = str
        if os.path.exists(self.fstab_path):
            with open(self.fstab_path,"r+a") as f:
                for line in f:
                    if self.repository_path in line:
                        return False
                f.write(url+'  '+self.repository_path+' nfs    defaults        0 0\n')
                f.close()
        if os.path.exists(self.conf_path):
            try:
                config.readfp(open(self.conf_path))
                config.set('datacenter', 'esage.appstore.templateLocation', url)
                config.write(open(self.conf_path,'wa'))
                config.close()
            except Exception:
                logging.error('Cannot set repository path.')


    def check_mount(self):
        if os.path.exists(self.mtab_path):
            with open(self.mtab_path,"rt") as f:
                for line in f:
                    if self.repository_path in line:
                        return True
        return False

    def mount_nfs(self,url):
        try:
            # Mount with 4 seconds of timeout, redirecting output to null
            p = subprocess.call('timeout 4 mount '+url+' '+self.repository_path, shell=True, stdout=open('/dev/null', 'w'), stderr=subprocess.STDOUT)
            if p != 0:
                return False
        except Exception:
            logging.error('Cannot mount '+url+' repository')
            return False
        return True

    def check_nfs_url(self,url):
        if ":/" in url:
            try:
                s = socket.inet_aton(url.split(":/")[0])
                return True
            except socket.error:
                pass
        return False
###################################
class ApiWindow:
    def __init__(self,screen,profiles):
        self.conf_path = '/var/www/html/ui/index.html'
        ip = detect_public_ip()
        if ip and not 'esage-ui' in profiles:
            self.defaulturl = 'http://'+ip+'/api'
            # Dont't detect IP if it's a Standalone Client.
        else:
            self.defaulturl = "http://<endpoint-ip>/api"
        self.screen = screen
        self.label = Label('API endpoint:')
        self.entry = Entry(33,self.defaulturl)
        self.text = TextboxReflowed(50,"Enter API endpoint.\nThis URL should be reachable by the client browser.\n")
        self.topgrid = GridForm(self.screen, "API endpoint", 1, 3)
        self.topgrid.add(self.text,0,0,(0, 0, 0, 1))
        self.grid = Grid(2, 1)
        self.grid.setField (self.label, 0, 0, (0, 0, 1, 0), anchorLeft = 1)
        self.grid.setField (self.entry, 1, 0)
        self.topgrid.add (self.grid, 0, 1, (0, 0, 0, 1))
        self.bb = ButtonBar (self.screen, ["OK","Cancel"],compact=1)
        self.topgrid.add (self.bb, 0, 2, growx = 1)

    def run(self):
        self.topgrid.setCurrent(self.entry)
        result = self.topgrid.run()
        rc = self.bb.buttonPressed(result)
        if rc == "cancel":
            return -1
        if not self.check_api_url(self.entry.value()):
            self.screen.popWindow()
            ButtonChoiceWindow(self.screen,"URL incorrect","Please enter a URL with the form:\n http://<endpoint-ip>/api",buttons = ["OK"], width = 50)
        else:
            self.ip = re.search('://(.+?)/', self.entry.value()).group(1)
            self.defaulturl = self.entry.value()
            self.set_server_ip()
            return 0

    def check_api_url(self, url):
        if "http://" in url:
            try:
                s = socket.inet_aton(url.split("http://")[1].split("/")[0])
                return True
            except socket.error:
                pass
        elif "https://" in url:
            try:
                s = socket.inet_aton(url.split("https://")[1].split("/")[0])
                return True
            except socket.error:
                pass
        return False

    def set_server_ip(self):
        config = ConfigParser.ConfigParser()
        config.optionxform = str
        conf_path = '/opt/esage/config/esage.properties'
        ui_replace = os.system("/opt/esage/scripts/ui.sh")
        if os.path.exists(conf_path):
            try:
                ip = detect_public_ip()
                config.readfp(open(conf_path))
                if config.has_section('datacenter'):
                    config.set('datacenter', 'esage.platform.api.location', 'http://'+ip+':8009/api')
                if config.has_section('platform'):
                    config.set('platform', 'esage.platform.api.location', 'http://'+ip+':8009/api')
                config.write(open(conf_path,'wa'))
                config.close()
            except Exception as e:
                logging.error('Cannot set API endpoint: %s' % e)

class DCWindow:
    def __init__(self,screen):
        self.defaultdc = "Default"
        self.screen = screen
        self.label = Label('Datacenter name:')
        self.entry = Entry(33,self.defaultdc)
        self.text = TextboxReflowed(50,"Enter Datacenter ID for your set of remote services.\n")
        self.topgrid = GridForm(self.screen, "Datacenter name", 1, 3)
        self.topgrid.add(self.text,0,0,(0, 0, 0, 1))
        self.grid = Grid(2, 1)
        self.grid.setField (self.label, 0, 0, (0, 0, 1, 0), anchorLeft = 1)
        self.grid.setField (self.entry, 1, 0)
        self.topgrid.add (self.grid, 0, 1, (0, 0, 0, 1))
        self.bb = ButtonBar (self.screen, ["OK","Cancel"],compact=1)
        self.topgrid.add (self.bb, 0, 2, growx = 1)

    def run(self):
        self.topgrid.setCurrent(self.entry)
        result = self.topgrid.run()
        rc = self.bb.buttonPressed(result)
        if rc == "cancel":
            return -1
        else:
            self.defaultdc = self.entry.value()
            self.set_dc_id(self.entry.value())
            return 0

    def set_dc_id(self, dcid):
        config = ConfigParser.ConfigParser()
        config.optionxform = str
        conf_path = '/opt/esage/config/esage.properties'
        if os.path.exists(conf_path):
            try:
                config.readfp(open(conf_path))
                config.set('datacenter', 'esage.datacenter.id', dcid)
                config.write(open(conf_path,'wa'))
                config.close()
            except Exception:
                logging.error('Cannot set datacenter id')

class ServerWindow:
    def __init__(self,screen):
        self.ip = "<server-ip>"
        self.screen = screen
        self.label = Label('Esage Server IP')
        self.entry = Entry(33,self.ip)
        self.text = TextboxReflowed(50,"Enter IP address of Esage server:\n")
        self.topgrid = GridForm(self.screen, "Server IP:", 1, 3)
        self.topgrid.add(self.text,0,0,(0, 0, 0, 1))
        self.grid = Grid(2, 1)
        self.grid.setField (self.label, 0, 0, (0, 0, 1, 0), anchorLeft = 1)
        self.grid.setField (self.entry, 1, 0)
        self.topgrid.add (self.grid, 0, 1, (0, 0, 0, 1))
        self.bb = ButtonBar (self.screen, ["OK","Cancel"],compact=1)
        self.topgrid.add (self.bb, 0, 2, growx = 1)
    def run(self):
        self.topgrid.setCurrent(self.entry)
        result = self.topgrid.run()
        rc = self.bb.buttonPressed(result)
        if rc == "cancel":
            return -1
        elif not self.check_ip(self.entry.value()):
            self.screen.popWindow()
            self.ip = self.entry.value()
            ButtonChoiceWindow(self.screen,"IP error","IP address not valid.",buttons = ["OK"], width = 50)

        else:
            self.ip = self.entry.value()
            self.set_server_ip()
            return 0

    def set_server_ip(self):
        config = ConfigParser.ConfigParser()
        config.optionxform = str
        conf_path = '/opt/esage/config/esage.properties'
        if os.path.exists(conf_path):
            try:
                config.readfp(open(conf_path))
                config.set('datacenter', 'esage.platform.api.location', 'http://'+self.ip+':8009/api')
                config.set('datacenter', 'esage.rabbitmq.host', self.ip)
                config.write(open(conf_path,'wa'))
                config.close()
            except Exception:
                logging.error('Cannot set Server ip')

    def check_ip(self,ip):
        try:
            s = socket.inet_aton(ip)
            return True
        except socket.error:
            pass
        return False

class NTPWindow:
    def __init__(self,screen):
        self.ip = "<ntp-ip>"
        self.screen = screen
        self.label = Label('NTP Server IP')
        self.entry = Entry(33,self.ip)
        self.text = TextboxReflowed(50,"Enter NTP Server IP.\nThis URL should be can access by the host.\n")
        self.topgrid = GridForm(self.screen, "NTP Server IP:", 1, 3)
        self.topgrid.add(self.text,0,0,(0, 0, 0, 1))
        self.grid = Grid(2, 1)
        self.grid.setField (self.label, 0, 0, (0, 0, 1, 0), anchorLeft = 1)
        self.grid.setField (self.entry, 1, 0)
        self.topgrid.add (self.grid, 0, 1, (0, 0, 0, 1))
        self.bb = ButtonBar (self.screen, ["OK","Cancel"],compact=1)
        self.topgrid.add (self.bb, 0, 2, growx = 1)
    def run(self):
        self.topgrid.setCurrent(self.entry)
        result = self.topgrid.run()
        rc = self.bb.buttonPressed(result)
        if rc == "cancel":
            return -1
        elif not self.check_ip(self.entry.value()):
            self.screen.popWindow()
            self.ip = self.entry.value()
            ButtonChoiceWindow(self.screen,"IP error","IP address not valid.",buttons = ["OK"], width = 50)

        else:
            self.ip = self.entry.value()
            self.set_ntp_ip()
            return 0

    def set_ntp_ip(self):
        config = ConfigParser.ConfigParser()
        config.optionxform = str
        conf_path = '/etc/ntp.conf'
        if os.path.exists(conf_path):
            try:
                config.readfp(open(conf_path))
                config.set('server', 'server', self.ip)
                config.write(open(conf_path,'wa'))
            except Exception:
                logging.error('Cannot set NTP Server ip')

    def check_ip(self,ip):
        try:
            s = socket.inet_aton(ip)
            return True
        except socket.error:
            pass
        return False


class ZKWindow:
    def __init__(self,screen):
        self.ip = "<server-ip>"
        self.screen = screen
        self.label = Label('API Loadbance Server IP')
        self.entry = Entry(33,self.ip)
        self.text = TextboxReflowed(50,"Enter IP address of API Loadbance Server:\n")
        self.topgrid = GridForm(self.screen, "Server IP:", 1, 3)
        self.topgrid.add(self.text,0,0,(0, 0, 0, 1))
        self.grid = Grid(2, 1)
        self.grid.setField (self.label, 0, 0, (0, 0, 1, 0), anchorLeft = 1)
        self.grid.setField (self.entry, 1, 0)
        self.topgrid.add (self.grid, 0, 1, (0, 0, 0, 1))
        self.bb = ButtonBar (self.screen, ["OK","Cancel"],compact=1)
        self.topgrid.add (self.bb, 0, 2, growx = 1)
    def run(self):
        self.topgrid.setCurrent(self.entry)
        result = self.topgrid.run()
        rc = self.bb.buttonPressed(result)
        if rc == "cancel":
            return -1
        elif not self.check_ip(self.entry.value()):
            self.screen.popWindow()
            self.ip = self.entry.value()
            ButtonChoiceWindow(self.screen,"IP error","IP address not valid.",buttons = ["OK"], width = 50)

        else:
            self.ip = self.entry.value()
            self.set_zk_ip()
            return 0

    def set_zk_ip(self):
        config = ConfigParser.ConfigParser()
        config.optionxform = str
        conf_path = '/opt/esage/config/esage.properties'
        if os.path.exists(conf_path):
            try:
                config.readfp(open(conf_path))
                config.set('platform', 'esage.api.zk.serverConnection', ''+self.ip+':2181')
                config.set('platform', 'esage.database.host', self.ip)
                config.set('platform', 'esage.rabbitmq.host', self.ip)
                config.set('platform', 'esage.redis.host', self.ip)
                config.write(open(conf_path,'wa'))
            except Exception:
                logging.error('Cannot set ZK Server ip')

    def check_ip(self,ip):
        try:
            s = socket.inet_aton(ip)
            return True
        except socket.error:
            pass
        return False

class HTTPSWindow:
    def __init__(self, screen, set_timeouts):
        self.screen = screen
        self.text = TextboxReflowed(50,"Do you want to enable secure SSL front-end?\n")
        self.grid = GridForm(self.screen, "Enable HTTPS", 1, 2)
        self.bb = ButtonBar(self.screen, ["No","Yes"],compact=1)
        self.grid.add(self.text,0,0,(0, 0, 0, 1))
        self.grid.add(self.bb,0,1,growx = 1)       
        self.esage_conf = '/etc/httpd/conf.d/esage.conf'
        self.esage_conf_example = '/usr/share/doc/esage-ui/esage.conf'
        self.ssl_conf = '/etc/httpd/conf.d/ssl.conf'
        self.ssl_conf_example = '/usr/share/doc/esage-ui/ssl.conf'
        self.esage_ssl_conf = '/etc/httpd/conf.d/esage_ssl.conf'
        self.esage_ssl_conf_example = '/usr/share/doc/esage-ui/esage_ssl.conf'
        self.esage_generate_certs = '/usr/share/doc/esage-ui/create_certs.sh'
        self.tomcat_server_conf = '/opt/esage/tomcat/conf/server.xml'
        self.tomcat_server_ssl_conf_example = '/usr/share/doc/esage-core/examples/tomcat/server_ssl.xml'
        self.ui_conf_path = '/var/www/html/ui/index.html'
        self.set_timeouts = set_timeouts
        self.https = False

    def set_api_timeouts(self, timeout):
        # Determine the file to change
        if self.https:
            config_file = self.esage_ssl_conf
        else:
            config_file = self.esage_conf
        logging.info("Setting Proxy timeouts in %s" % config_file)

        # Set timeout using Augeas
        a = Augeas()
        for loc in a.match("/files%s/VirtualHost/*[arg='/api']" % config_file):
            proxy_pass = a.match("%s/*[self::directive='ProxyPass']" % loc)
            if len(proxy_pass) == 1:
                # Proxy timeout already exists
                logging.info("ProxyPass found")
                arg1 = a.get("%s/arg" % proxy_pass[0])
                arg2 = "timeout=%s" % timeout
                a.set("%s/arg[1]" % proxy_pass[0], arg1)
                a.set("%s/arg[2]" % proxy_pass[0], arg2)

            a.save()
            a.close()

    def run(self):
        result = self.grid.run()
        rc = self.bb.buttonPressed(result)
        if rc == "no":
            self.https = False
            self.set_http()
        else:
            # Generate certs and set HTTPS in apache
            self.https = True
            self.set_https()
        if self.set_timeouts:
            self.set_api_timeouts("600")
        return 0

    def set_http(self):
        if os.path.exists(self.esage_conf_example):
            shutil.move(self.esage_conf_example, self.esage_conf)
        else:
            logging.warning("esage.conf missing")

        try:
            upd_lic_url = commands.getoutput("mysql kinton -e \"update system_properties set value = 'http://www.esage.com/license' where name = 'client.dashboard.licenseUrl'\"")
            httpd_restartd = os.system("systemctl restart httpd.service")
            logging.info("Updated license request url to use http")
        except Exception as e:
            logging.error("Error updating license request url.")

    def set_https(self):
        # save backups and copy configuration from examples.
        if os.path.exists(self.esage_conf):
            shutil.move(self.esage_conf,self.esage_conf+'.backup')
        if os.path.exists(self.tomcat_server_conf):
            shutil.move(self.tomcat_server_conf,self.tomcat_server_conf+'.backup')
        if os.path.exists(self.esage_ssl_conf_example):
            shutil.copy2(self.esage_ssl_conf_example,self.esage_ssl_conf)
        else:
            logging.warning("esage_ssl.conf missing")
        if os.path.exists(self.tomcat_server_ssl_conf_example):
            shutil.copy2(self.tomcat_server_ssl_conf_example,self.tomcat_server_conf)
        else:
            logging.warning("server.xml missing")
        if os.path.exists(self.ssl_conf_example):
            shutil.copy2(self.ssl_conf_example,self.ssl_conf)
        else:
            logging.warning("esage.conf missing")
        try:
            # call script and redirect output to null
            p = subprocess.call(self.esage_generate_certs, shell=True, stdout=open('/dev/null', 'w'), stderr=subprocess.STDOUT)
        except Exception:
            logging.error("Cannot generate SSL certs")
        # Change client json http -> https
        if os.path.exists(self.ui_conf_path):
            shutil.copy2(self.ui_conf_path,self.ui_conf_path+'.backup')
            try:
                with open(self.ui_conf_path, "rt") as conf:
                    lines = conf.readlines()
                conf.close()
                with open(self.ui_conf_path, "wb") as out:
                    for line in lines:
                        out.write(re.sub(r'http:','https:',line))
                out.close()
            except Exception:
                logging.warning("Failed setting https in "+self.ui_conf_path+" :\n"+str(err))
        else:
            logging.warning("UI config not found")

        try:
            upd_lic_url = commands.getoutput("mysql kinton -e \"update system_properties set value = 'https://www.esage.com/license' where name = 'client.dashboard.licenseUrl'\"")
            httpd_restartd = os.system("systemctl restart httpd.service")
            logging.info("Updated license request url to use https")
        except Exception as e:
            logging.error("Error updating license request url. Will not be able to request due to mixed content.")

class DHCPRelayWindow:
    def __init__(self,screen):
        self.all_nics = commands.getoutput('ifconfig | egrep -v "^ |^$|\.|lo" | awk \'{print $1}\'').split('\n')
        self.screen = screen
        self.grid = GridForm(self.screen, "DHCP Relay Configuration", 3, 8)
        self.text_mgmt_nic = TextboxReflowed(25,"Management interface:".ljust(25))
        self.list_mgmt_nic = Listbox(height=3, width=20, scroll=1)
        self.text_svc_nic = TextboxReflowed(25,"Service interface:".ljust(25))
        self.list_svc_nic = Listbox(height=3, width=20, scroll=1)
        for idx, val in enumerate(self.all_nics):
            self.list_mgmt_nic.append(val, idx)
            self.list_svc_nic.append(val, idx)
        self.text_dhcp_server = TextboxReflowed(25,"DHCP server IP:".ljust(25))
        self.entry_dhcp_server = Entry(width=20)
        self.text_svc_net = TextboxReflowed(25,"Service network:".ljust(25))
        self.entry_svc_net = Entry(width=20)
        self.text_vlan_range = TextboxReflowed(25,"VLAN range:".ljust(25))
        self.text_vlan_from = TextboxReflowed(25,"from:".rjust(25))
        self.text_vlan_to = TextboxReflowed(25,"to:".rjust(25))
        self.entry_vlan_from = Entry(width=5)
        self.entry_vlan_to = Entry(width=5)
        self.accept_btn = Button("Accept")
        self.cancel_btn = Button("Cancel")
        
        self.grid.add(self.text_mgmt_nic,0,0,(1,0,0,0))
        self.grid.add(self.list_mgmt_nic,1,0,(0,0,1,0),anchorLeft=1)
        self.grid.add(self.text_svc_nic,0,1,(1,0,0,0))
        self.grid.add(self.list_svc_nic,1,1,(0,0,1,0),anchorLeft=1)
        self.grid.add(self.text_dhcp_server,0,2,(1,0,0,0))
        self.grid.add(self.entry_dhcp_server,1,2,(0,0,1,0),anchorLeft=1)
        self.grid.add(self.text_svc_net,0,3,(1,0,0,0))
        self.grid.add(self.entry_svc_net,1,3,(0,0,1,0),anchorLeft=1)
        self.grid.add(self.text_vlan_range,0,4,(1,0,0,0))
        self.grid.add(self.text_vlan_from,0,5,(1,0,0,0))
        self.grid.add(self.entry_vlan_from,1,5,(0,0,1,0),anchorLeft=1)
        self.grid.add(self.text_vlan_to,0,6,(1,0,0,0))
        self.grid.add(self.entry_vlan_to,1,6,(0,0,1,1),anchorLeft=1)
        self.grid.add(self.accept_btn,0,7)
        self.grid.add(self.cancel_btn,1,7)

    def run(self):
        result = self.grid.run()
        if result == self.cancel_btn:
            logging.info("Cancel")
            return 0
        else:
            logging.info("Accept")
            for idx, val in enumerate(self.all_nics):
                if idx == self.list_svc_nic.current():
                    mgmt_nic = val
                    svc_nic = val

                    retcode, output = commands.getstatusoutput(
                        "cd /tmp && /usr/bin/esage-dhcp-relay -r %s -s %s -v %s-%s -x %s -n %s && mv /tmp/relay-config /etc/init.d/relay-config" %
                        (mgmt_nic, svc_nic, self.entry_vlan_from.value(), self.entry_vlan_to.value(), self.entry_dhcp_server.value(),
                            self.entry_svc_net.value()))
                    if retcode == 0:
                        logging.info("Successfully reconfigured DHCP relay.")
                        logging.info("Restarting service.")
                        retcode = commands.getstatus("/etc/init.d/relay-config restart")

                        if retcode == 0:
                            logging.info("Done.")
                        else:
                            logging.error("Something went wrong restarting service. Check system logs.")
                    else:
                        logging.error("Error configuring DHCP relay.")
                        logging.error(output)
                        return 1
            return 0

class SummaryWindow:
    def __init__(self,screen,ui_capable,azure=False):
        text = ""
        if ui_capable:
            text = "Configuration saved.\n\nPlease restart Esage tomcat and Apache services to apply configuration:\n\n$ sudo service httpd restart\n$ sudo service esage-tomcat restart\n\n"
        else:
            text = "Configuration saved.\n\nPlease restart Esage tomcat service to apply configuration:\n\n$ sudo service esage-tomcat restart\n\n"

        if ui_capable:
            uri = detect_public_ip()
            if azure:
                self.text = TextboxReflowed(50, text + "You may now log into %s \n\nUI credentials\n  User: admin\n  Password: kvmcloud\n\nPlease change these passwords after logging in for the first time.\n\n" % uri)
            else:
                self.text = TextboxReflowed(50,"You may now log into %s \n\nUI credentials\n  User: admin\n  Password: kvmcloud\n\nPlease change these passwords after logging in for the first time.\n\n" % uri)
        else:
            if azure:
                self.text = TextboxReflowed(50, text)
            else:
                self.text = TextboxReflowed(50,"Your setup is complete, you can now use Esage UniCloud to manage your virtual and cloud environments!")
        self.screen = screen
        firewalld_disable = os.system("systemctl disable firewalld.service")
        firewalld_stop = os.system("systemctl stop firewalld.service")
        self.topgrid = GridForm(self.screen, "Configuration Finished!", 1, 3)
        self.topgrid.add(self.text,0,0,(0, 0, 0, 1))
        self.bb = ButtonBar (self.screen, ["OK"],compact=1)
        self.topgrid.add (self.bb, 0, 2, growx = 1)
    def run(self):
        result = self.topgrid.run()
        rc = self.bb.buttonPressed(result)
        if rc == "OK":
            return 0 
        else:
            return -1

class mainWindow:
    def __init__(self):
        logging.basicConfig(filename='/var/log/esage-firstboot.log',level=logging.DEBUG,format='%(asctime)s - %(levelname)s: %(message)s')
        # profiles from /etc/esage-installer
        profiles = ""
        screen = SnackScreen()
        if os.path.exists("/etc/esage-installer"):
            try:
                profiles = eval(open("/etc/esage-installer", "r").readline().split(": ")[1])
            except:
                logging.error("Cannot read profiles.")
                exit(1)
        else:
            screen.finish()
            logging.error("No esage profiles detected.")
            exit(1)

        screen = SnackScreen()


        #  Esage colors theme
        screen.setColor('ROOT','yellow','black')
        screen.setColor('SHADOW','black','black')
        screen.setColor('TITLE','black','white')
        screen.setColor('ENTRY','black','yellow')
        screen.setColor('LABEL','black','white')
        screen.setColor('WINDOW','black','white')
        screen.setColor('BUTTON','yellow','black')
        screen.setColor('ACTBUTTON','yellow','black')
        screen.setColor('HELPLINE','yellow','black')
        screen.setColor('ROOTTEXT','yellow','black')
        """ Reference:
        colorsets = { "ROOT" : _snack.COLORSET_ROOT,
              "BORDER" : _snack.COLORSET_BORDER,
              "WINDOW" : _snack.COLORSET_WINDOW,
              "SHADOW" : _snack.COLORSET_SHADOW,
              "TITLE" : _snack.COLORSET_TITLE,
              "BUTTON" : _snack.COLORSET_BUTTON,
              "ACTBUTTON" : _snack.COLORSET_ACTBUTTON,
              "CHECKBOX" : _snack.COLORSET_CHECKBOX,
              "ACTCHECKBOX" : _snack.COLORSET_ACTCHECKBOX,
              "ENTRY" : _snack.COLORSET_ENTRY,
              "LABEL" : _snack.COLORSET_LABEL,
              "LISTBOX" : _snack.COLORSET_LISTBOX,
              "ACTLISTBOX" : _snack.COLORSET_ACTLISTBOX,
              "TEXTBOX" : _snack.COLORSET_TEXTBOX,
              "ACTTEXTBOX" : _snack.COLORSET_ACTTEXTBOX,
              "HELPLINE" : _snack.COLORSET_HELPLINE,
              "ROOTTEXT" : _snack.COLORSET_ROOTTEXT,
              "EMPTYSCALE" : _snack.COLORSET_EMPTYSCALE,
              "FULLSCALE" : _snack.COLORSET_FULLSCALE,
              "DISENTRY" : _snack.COLORSET_DISENTRY,
              "COMPACTBUTTON" : _snack.COLORSET_COMPACTBUTTON,
              "ACTSELLISTBOX" : _snack.COLORSET_ACTSELLISTBOX,
              "SELLISTBOX" : _snack.COLORSET_SELLISTBOX }  """


        # Title
        if os.path.exists("/etc/system-release"):
            release = open("/etc/system-release", "r").readline()
            screen.drawRootText(0, 0, release)


        # NFS Repository window
        DONE = 0
        if any(p in profiles for p in ['esage-allinone','esage-kvm','esage-datacenter-services']) \
            and not 'esage-nfs-repository' in profiles:
            while not DONE:
                self.win = NfsWindow(screen)
                rc = self.win.run()
                if rc == -1:
                    screen.popWindow()
                    DONE = 1
                elif rc == 0:
                    screen.popWindow()
                    DONE = 1
        DONE = 0

        # Datacenter ID (Server, V2V, Public Cloud, )
        if any(p in profiles for p in ['esage-allinone', 'esage-allinone-azure', 'esage-datacenter-services', 'esage-datacenter-services-azure', 'esage-public-cloud']):
            while not DONE:
                self.win = DCWindow(screen)
                rc = self.win.run()
                if rc == -1:
                    screen.popWindow()
                    DONE = 1
                elif rc == 0:
                    screen.popWindow()
                    DONE = 1
        DONE = 0

        # Server IP for Remote Services 
        if any(p in profiles for p in ['esage-distributed', 'esage-datacenter-services', 'esage-datacenter-services-azure',  'esage-public-cloud']) \
            and not any(p in profiles for p in ['esage-platform', 'esage-platform-azure', 'esage-standalone-api', 'esage-ui']):
            while not DONE:
                self.win = ServerWindow(screen)
                rc = self.win.run()
                if rc == -1:
                    screen.popWindow()
                    DONE = 1
                elif rc == 0:
                    screen.popWindow()
                    DONE = 1
        DONE = 0

       # NTP ID (KVM )
        if any(p in profiles for p in ['esage-kvm', 'esage-platform','esage-datacenter-services','esage-public-cloud','esage-standalone-api','esage-ui','esage-nfs-repository','esage-dhcp-relay','esage-lvm-storage-server']):
            while not DONE:
                self.win = NTPWindow(screen)
                rc = self.win.run()
                if rc == -1:
                    screen.popWindow()
                    DONE = 1
                elif rc == 0:
                    screen.popWindow()
                    DONE = 1
        DONE = 0

       # ZK ID (zookeeper )
        if any(p in profiles for p in ['esage-platform','esage-standalone-api']):
            while not DONE:
                self.win = ZKWindow(screen)
                rc = self.win.run()
                if rc == -1:
                    screen.popWindow()
                    DONE = 1
                elif rc == 0:
                    screen.popWindow()
                    DONE = 1
        DONE = 0

        # API endpoint and SSL
        if any(p in profiles for p in ['esage-ui','esage-allinone','esage-allinone-azure','esage-platform','esage-platform-azure']):
            while not DONE:
                self.win = ApiWindow(screen,profiles)
                rc = self.win.run()
                if rc == -1:
                    screen.popWindow()
                    DONE = 1
                elif rc == 0:
                    screen.popWindow()
                    DONE = 1
            DONE = 0
            while not DONE:
                if any(p in profiles for p in ['esage-allinone-azure','esage-platform-azure']):
                    self.win = HTTPSWindow(screen, True)
                else:
                    self.win = HTTPSWindow(screen, False)
                rc = self.win.run()
                if rc == -1:
                    screen.popWindow()
                    DONE = 1
                elif rc == 0:
                    screen.popWindow()
                    DONE = 1
        DONE = 0

            
        # DHCP RELAY
        if any(p in profiles for p in ['esage-dhcp-relay']):
            while not DONE:
                self.win = DHCPRelayWindow(screen)
                rc = self.win.run()
                if rc == -1:
                    screen.popWindow()
                    DONE = 1
                elif rc == 0:
                    screen.popWindow()
                    DONE = 1
        DONE = 0

        # Show connection INFO
        while not DONE:
            if any(p in profiles for p in ['esage-allinone-azure','esage-platform-azure']):
                self.win = SummaryWindow(screen, True, True)
            elif any(p in profiles for p in ['esage-ui','esage-allinone']):
                self.win = SummaryWindow(screen, True)
            elif any(p in profiles for p in ['esage-datacenter-services-azure']):
                self.win = SummaryWindow(screen, False, True)
            else:
                self.win = SummaryWindow(screen, False)
            rc = self.win.run()
            if rc == -1 or rc == 0:
                screen.popWindow()
                DONE = 1
        DONE = 0


        screen.popWindow()
        screen.finish()

if __name__ == "__main__":
    # Attempt to handle signal for Control+C
    try:
        signal.signal(signal.SIGINT, signal_handler)   
        ret = mainWindow()
    except KeyboardInterrupt:
        sys.exit()
